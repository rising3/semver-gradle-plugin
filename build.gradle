import java.time.ZoneId
import java.time.ZonedDateTime

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "com.github.rising3:semver-gradle-plugin:0.7.1"
    }
}

plugins {
    id "com.gradle.plugin-publish" version "0.13.0"
    id "java-gradle-plugin"
    id "maven-publish"
    id "java"
    id "groovy"
    id "jacoco"
    id "com.github.hierynomus.license" version "0.16.1"
    id "com.diffplug.spotless" version "6.2.0"
    id "eclipse"
    id "idea"
//    id 'com.github.rising3.semver' version '0.7.1'
}

apply plugin: "com.github.rising3.semver"

group = "com.github.rising3"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.0.0.202111291000-r'
    implementation 'org.kohsuke:github-api:1.301'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.13.1' // This is the last version of okhttp3 that support UrlConnection
    testImplementation platform('org.spockframework:spock-bom:2.0-groovy-3.0')
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.eclipse.jgit:org.eclipse.jgit.junit:6.0.0.202111291000-r'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'org.mockito:mockito-inline:3.+'
}

gradlePlugin {
    plugins {
        semver {
            id = "com.github.rising3.semver"
            implementationClass = "com.github.rising3.gradle.semver.plugins.SemVerGradlePlugin"
            displayName = "Gradle plugin for Updates the project version."
            description = "A plugin that can updating the semantic versions like `yarn version` command."
        }
    }
}

pluginBundle {
    website = "https://github.com/rising3/semver-gradle-plugin"
    vcsUrl = "https://github.com/rising3/semver-gradle-plugin.git"
    tags = ["semver", "semantic-versioning", "conventional-commits", "automation", "semantic", "version", "release", "git", "ci", "cd", "yarn"]
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Id": "${project.group}:${project.name}:${project.version}",
                "Created-By": "${System.getProperty("java.version")}(${System.getProperty("java.vendor")})",
                "Built-With": "gradle-${project.gradle.gradleVersion}, groovy-${GroovySystem.version}",
                "Build-Time": "${ZonedDateTime.now(ZoneId.of("UTC"))}",
                "License": "The Apache License, Version 2.0"
        )
    }
}

sourceSets {
    functionalTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter(tasks.named('test'))
}

tasks.check.dependsOn functionalTest

gradlePlugin.testSourceSets(sourceSets.functionalTest)

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
    }
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitignore'
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat("1.8")
    }
    groovy {
        importOrder()
        // greclipse()
    }
}

license {
    header = rootProject.file("codequality/HEADER")
    strictCheck = true
//    license.ext["year"] = Calendar.getInstance().get(Calendar.YEAR)
    license.ext["year"] = 2021
    license.ext["name"] = project.findProperty("author")
    license.ext["email"] = project.findProperty("email")
}

semver {
    target="TAG"
    changeLog="BOTH"
}

tasks.semver.configure {
    doFirst {
        println "doFirst preversion: $project.version"
    }
    doLast {
        println "doLast postversion: $project.version"
    }
}

task install {
    dependsOn publishToMavenLocal
}
